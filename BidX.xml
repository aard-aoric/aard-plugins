<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Monday, October 28, 2024, 2:26 PM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "BidX" generated by Plugin Wizard -->

<muclient>
<plugin
   name="BidX"
   author="Aoric"
   id="ca5a6908048dad37ebee8987"
   language="Lua"
   purpose="Show auctioned item in miniwin or main window"
   save_state="y"
   date_written="2024-10-28 14:24:51"
   requires="5.07"
   version="1.5"
   >

</plugin>


<!--  Triggers  -->

<triggers>
  <trigger
   group="auction"
   name="lbid_num_hist_from_note"
   enabled="y"
   match="^(\| )?command \'(?P<cmdline>(?P<cmd>\w+?) (?P<num>\d+?) (?P<hist>\w+?))\' will show the bidding history if the auction(\s+)?$"
   regexp="y"
   send_to="12"
   omit_from_output="y"
   script="hlink_lbid_num_from_note"
   sequence="600"
  >
  </trigger>

  <trigger
   group="auction"
   name="lbid_num_from_note"
   enabled="y"
   match="^(\| )?You can use \'(?P<cmdline>(?P<cmd>\w+?) (?P<num>\d+?))\' to check if the auction is still active and the(\s+)?$"
   regexp="y"
   send_to="12"
   omit_from_output="y"
   script="hlink_lbid_num_from_note"
   sequence="600"
  >
  </trigger>

  <trigger
   group="auction"
   name="end_line_rbid_list"
   enabled="y"
   match="^(?:[ ]+)?\[ Remort Auction\, Inc\. \(TM\) \- Current List of Inventory \]$"
   regexp="y"
   send_to="12"
   omit_from_output="n"
   sequence="600"
  >
  <send>
SetVariable("cmd_used_auc_list", "rbid")
  </send>
  </trigger>

  <trigger
   group="auction"
   name="end_line_bid_list"
   enabled="y"
   match="^(?:[ ]+)?\[ Quick Auction\, Inc\. \(TM\) \- Current List of Inventory \]$"
   regexp="y"
   send_to="12"
   omit_from_output="n"
   sequence="600"
  >
  <send>
SetVariable("cmd_used_auc_list", "bid")
  </send>
  </trigger>

  <trigger
   group="auction"
   name="end_line_lbid_list"
   enabled="y"
   match="^(?:[ ]+)?\[ Aardwolf Marketplace \- Current List of Inventory \]$"
   regexp="y"
   send_to="12"
   omit_from_output="n"
   sequence="600"
  >
  <send>
SetVariable("cmd_used_auc_list", "lbid")
  </send>
  </trigger>

  <trigger
   group="auction"
   name="rbid_item_new"
   enabled="y"
   match="^Remort Auction\: (?P<seller>\w+?) is (?P<action>\w+?) a level (?P<level>\d+?) (?P<item_desc>.+?) \(Num (?P<num>\d+?)\)\.$"
   regexp="y"
   send_to="12"
   script="hlink_auc_item"
   omit_from_output="y"
   sequence="600"
  >
  </trigger>

  <trigger
   group="auction"
   name="bid_item_new"
   enabled="y"
   match="^Auction\: (?P<seller>\w+?) is (?P<action>\w+?) (?P<item_desc>.+?) \(Level (?P<level>\d+?)\, Num (?P<num>\d+?)\)\. Current bid is (?P<amount>.+?)\.$"
   regexp="y"
   send_to="12"
   script="hlink_auc_item"
   omit_from_output="y"
   sequence="600"
  >
  </trigger>

  <trigger
   group="auction"
   name="bid_outbid"
   enabled="y"
   match="^Auction\: (?P<bidder>\w+?) has placed a bid for (?P<amount>[\d,-]+?) (?P<currency>\w+?) on (?P<item_desc>.+?) \(Level (?P<level>\d+?)\, Num (?P<num>\d+?)\)\.$"
   regexp="y"
   send_to="12"
   script="hlink_auc_item"
   omit_from_output="y"
   sequence="600"
  >
  </trigger>

  <trigger
   group="auction"
   name="bid_list"
   enabled="y"
   match="^(?:[ ]+)?(?P<num>\d+?)[ ]\-[ ](?P<seller>\w+?)(?:[ ]+)(?P<item_desc>.+?)(?:[ ]+)(?P<level>\d+?)(?:[ ]+)(?P<last_bid>[\d,-]+?)(?:[ ]+)(?P<time>.+?)$"
   regexp="y"
   send_to="12"
   script="hlink_auc_list"
   omit_from_output="y"
   sequence="600"
  >
  </trigger>

  <trigger
   group="auction"
   name="lbid_item_new"
   enabled="y"
   match="^Market\: (?P<seller>\w+?) is (?P<action>\w+?) (?P<item_desc>.+?) \(Level (?P<level>\d+?)\, Num (?P<num>\d+?)\)\. Auction is for (?P<currency>\w+?)\.$"
   regexp="y"
   send_to="12"
   script="hlink_auc_item"
   omit_from_output="y"
   sequence="600"
  >
  </trigger>

  <trigger
   group="auction"
   name="lbid_outbid"
   enabled="y"
   match="^Market\: (?P<bidder>\w+?) has[ ](proxy[ ]|)bid (?P<amount>[\d,-]+?) (?P<currency>\w+?) on (.+?) \(Level (?P<level>\d+?)\, Num (?P<num>\d+?)\)\.$"
   regexp="y"
   send_to="12"
   script="hlink_auc_item"
   omit_from_output="y"
   sequence="600"
  >
  </trigger>

  <trigger
   group="auction"
   name="lbid_item_last_min_notif"
   enabled="y"
   match="^Market\: Bid of (?P<amount>[\d,-]+?) (?P<currency>\w+?) on (?P<item_desc>.+) \(Level (?P<level>\d+?)\, Num (?P<num>\d+?)\)$"
   regexp="y"
   send_to="12"
   script="hlink_auc_item"
   omit_from_output="y"
   sequence="600"
  >
  </trigger>

  <trigger
   group="auction"
   name="lbid_list"
   enabled="y"
   match="^(?:[ ]+)?(?P<num>\d+?)[ ](?P<item_desc>.+?)(?:[ ]+)(?P<level>\d+?)(?:[ ]+)(?P<currency>\*Gold|Gold|Qp|Tp)(?:[ ]+)(?P<last_bid>.+?)(?:[ ]+)(?P<bids>\d+?)(?:[ ]+)(?P<time_left>.+?)$"
   regexp="y"
   send_to="12"
   script="hlink_auc_list"
   omit_from_output="y"
   sequence="600"
  >
  </trigger>

  <trigger
   group="auction"
   enabled="y"
   match="Current bid on this item is * * (*)."
   send_to="12"
   sequence="550"
  >
  <send>
-- do something?
  </send>
  </trigger>

  <trigger
   group="auction"
   enabled="y"
   match="^There is no (auction|marketplace) item with that id\.$"
   regexp="y"
   send_to="12"
   script="bx_disable_triggers"
   sequence="540"
  >
  </trigger>

  <trigger
   group="auction"
   enabled="y"
   match="^(Remort |)?Auction\, Inc\. \(TM\) currently holds no inventory\.$"
   regexp="y"
   send_to="12"
   script="bx_disable_triggers"
   sequence="530"
  >
  </trigger>

  <trigger
   group="auction"
   enabled="n"
   keep_evaluating="y"
   match="(^&amp;lt;)|^$"
   name="auc_blank"
   regexp="y"
   send_to="12"
   sequence="520"
  >
  <send>
if (tonumber(GetVariable("capture_start")) == 0) and (tonumber(GetVariable("start_auc_line")) == 0) then
  SetVariable("capture_start", 1)
  
  EnableTrigger("auc_line", true)
  EnableTrigger("auc_body", true)
  
  -- print("start capturing...")

elseif (tonumber(GetVariable("capture_start")) ~= 0) and (tonumber(GetVariable("start_auc_line")) ~= 0) then
  SetVariable("capture_start", 0)
  SetVariable("start_auc_line", 0)
  
  EnableTrigger("auc_line", false)
  EnableTrigger("auc_body", false)
  EnableTrigger("auc_blank", false)
  
  -- print("end capture!")
end
  </send>
  </trigger>

  <trigger
   group="auction"
   name="auc_line"
   enabled="n"
   keep_evaluating="y"
   match="^\+\-{65}\+$"
   regexp="y"
   send_to="12"
   script="save_info"
   sequence="510"
  >
  <send>
SetVariable("start_auc_line", 1)
  </send>
  </trigger>

  <trigger
   group="auction"
   name="auc_body"
   enabled="n"
   keep_evaluating="y"
   match="*"
   send_to="12"
   script="save_info"
   sequence="500"
  >
  </trigger>
</triggers>


<!--  Aliases  -->

<aliases>
  <alias
   group="auction"
   match="bxr *"
   enabled="y"
   send_to="12"
   script="bx_ready_triggers"
   sequence="300"
  >
  <send>
local cmd = "rbid " .. %1
Execute(cmd)
SetVariable("last_cmd", cmd)
  </send>
  </alias>

  <alias
   group="auction"
   match="bxa *"
   enabled="y"
   send_to="12"
   script="bx_ready_triggers"
   sequence="300"
  >
  <send>
local cmd = "bid " .. %1
Execute(cmd)
SetVariable("last_cmd", cmd)
  </send>
  </alias>

  <alias
   group="auction"
   match="bxm *"
   enabled="y"
   send_to="12"
   script="bx_ready_triggers"
   sequence="300"
  >
  <send>
local cmd = "lbid " .. %1
Execute(cmd)
SetVariable("last_cmd", cmd)
  </send>
  </alias>

  <alias
   group="auction"
   match="^bx(?:[ ]+(\d+?))?$"
   regexp="y"
   enabled="y"
   send_to="12"
   script="bx_display_item_or_bid_amount"
   sequence="200"
  >
  </alias>
</aliases>


<!--  Variables  -->

<variables>
  <variable name="start_auc_line">0</variable>
  <variable name="capture_start">0</variable>
  <variable name="last_cmd"></variable>
  <variable name="cmd_used_auc_list"></variable>
</variables>


<!--  Scripts  -->

<script>
<![CDATA[

local t_data = {}

function bx_ready_triggers()
  SetVariable("start_auc_line", 0)
  SetVariable("capture_start", 0)
  
  EnableTrigger("auc_blank", true)
end

function bx_disable_triggers()
   SetVariable("capture_start", 0)
   SetVariable("start_auc_line", 0)

   EnableTrigger("auc_line", false)
   EnableTrigger("auc_body", false)
   EnableTrigger("auc_blank", false)
end

function save_info(name, line, wildcards, styles)
  table.insert(t_data, styles)
end

function hlink_auc_item(name, line, wildcards, styles)
  local cmd_line = ""

  if (string.match(name, "lbid")) then
    cmd_line = "bxm " .. wildcards.num
  elseif (string.match(name, "rbid")) then
    cmd_line = "bxr " .. wildcards.num
  else
    cmd_line = "bxa " .. wildcards.num
  end

  local is_done_checking_level = false
  local is_done_checking_num = false
  
  for _, v in ipairs(styles) do
    local text_color = RGBColourToName(v.textcolour)
    local text_bgcolor = RGBColourToName(v.backcolour)

    if (not is_done_checking_level) and (string.match(v.text, wildcards.level)) then
      ColourTell(text_color, text_bgcolor, v.text)
      is_done_checking_level = true
    elseif (not is_done_checking_num) and (string.match(v.text, wildcards.num)) then
      Hyperlink(cmd_line, v.text, "click the link or type " .. cmd_line, text_color, text_bgcolor, 0)
      is_done_checking_num = true
    else
      ColourTell(text_color, text_bgcolor, v.text)
    end
  end
  Note()
end

function hlink_lbid_num_from_note(name, line, wildcards, styles)
  local cmd_line = wildcards.cmdline
  
  for _, v in ipairs(styles) do
    local text_color = RGBColourToName(v.textcolour)
    local text_bgcolor = RGBColourToName(v.backcolour)

    if (string.match(v.text, cmd_line)) then
      Hyperlink(cmd_line, v.text, "click the link or type " .. cmd_line, text_color, text_bgcolor, 0)
    else
      ColourTell(text_color, text_bgcolor, v.text)
    end
  end
  Note()
end

function hlink_auc_list(name, line, wildcards, styles)
  local num = tonumber(wildcards.num)
  local cmd_used_to_list_auc_items = GetVariable("cmd_used_auc_list")
  local cmd_line = ""

  if cmd_used_to_list_auc_items == "rbid" then
    cmd_line = "bxr " .. num
  elseif cmd_used_to_list_auc_items == "bid" then
    cmd_line = "bxa " .. num
  elseif cmd_used_to_list_auc_items == "lbid" then
    cmd_line = "bxm " .. num
  else
    SetTriggerOption(name, "omit_from_output", "n")
    return
  end

  local is_done_checking_bid_num = false

  for _, v in ipairs(styles) do
    local text_color = RGBColourToName(v.textcolour)
    local text_bgcolor = RGBColourToName(v.backcolour)

    if (not is_done_checking_bid_num) and (string.match(v.text, num)) then
      -- check for spaces before the actual bid num
      for w in string.gmatch(v.text, " ") do
        ColourTell("", "", w)
      end
      Hyperlink(cmd_line, num, "click the link or type " .. cmd_line, text_color, text_bgcolor, 0)
      is_done_checking_bid_num = true
    else
      ColourTell(text_color, text_bgcolor, v.text)
    end    
  end
  Note()
end

function bx_display_item_or_bid_amount(name, line, wildcards, styles)
  local cmd_line = (GetVariable("last_cmd"))

  if (wildcards[1] ~= "") then
    cmd_line = cmd_line .. " " .. wildcards[1]
  end
  Execute(cmd_line)
end

]]>
</script>
</muclient>
