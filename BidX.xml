<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Monday, October 28, 2024, 2:26 PM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "BidX" generated by Plugin Wizard -->

<muclient>
<plugin
   name="BidX"
   author="Aoric"
   id="ca5a6908048dad37ebee8987"
   language="Lua"
   purpose="Show auctioned item in miniwin or main window"
   save_state="y"
   date_written="2024-10-28 14:24:51"
   requires="5.07"
   version="1.0"
   >

</plugin>


<!--  Triggers  -->

<triggers>
  <trigger
   group="auction"
   name="bid_item_new"
   enabled="y"
   match="^Auction\: (?P<seller>\w+?) is (\w+?) (.+?) \(Level (\d+?)\, Num (?P<num>\d+?)\)\. Current bid is (.+?)\.$"
   regexp="y"
   send_to="12"
   script="hlink_bid"
   omit_from_output="y"
   sequence="600"
  >
  </trigger>

  <trigger
   group="auction"
   name="bid_list"
   enabled="y"
   match="^(?P<num>.*\d+?)[ ]\-[ ](?P<seller>\w+?)(?:[ ]+)(.*?)(?:[ ]+)(\d+?)(?:[ ]+)([\d,-]+?)(?:[ ]+)(.+?)$"
   regexp="y"
   send_to="12"
   script="hlink_bid"
   omit_from_output="y"
   sequence="600"
  >
  </trigger>

  <trigger
   group="auction"
   name="bid_outbid"
   enabled="y"
   match="^Auction\: (?P<bidder>\w+?) has placed a bid for (?P<amount>[\d,-]+?) (?P<currency>\w+?) on (?P<item_desc>.+?) \(Level (?P<level>\d+?)\, Num (?P<num>\d+?)\)\.$"
   regexp="y"
   send_to="12"
   script="hlink_bid"
   omit_from_output="y"
   sequence="600"
  >
  </trigger>

  <trigger
   group="auction"
   name="lbid_item_new"
   enabled="y"
   match="^Market\: (?P<seller>\w+?) is (\w+?) (.+?) \(Level (\d+?)\, Num (?P<num>\d+?)\)\. Auction is for (\w+?)\.$"
   regexp="y"
   send_to="12"
   script="hlink_lbid"
   omit_from_output="y"
   sequence="600"
  >
  </trigger>

  <trigger
   group="auction"
   name="lbid_item_last_min_notif"
   enabled="y"
   match="^Market\: Bid of ([\d,-]+?) (\w+?) on (.+) \(Level (\d+?)\, Num (?P<num>\d+?)\)$"
   regexp="y"
   send_to="12"
   script="hlink_lbid"
   omit_from_output="y"
   sequence="600"
  >
  </trigger>

  <trigger
   group="auction"
   name="lbid_list"
   enabled="y"
   match="^(?P<num>.*\d+?)[ ](.*?)(?:[ ]+)(\d+?)(?:[ ]+)(\*Gold|Gold|Qp|Tp)(?:[ ]+)([\d,-]+?)(?:[ ]+)(\d+?)(?:[ ]+)(.+?)$"
   regexp="y"
   send_to="12"
   script="hlink_lbid"
   omit_from_output="y"
   sequence="600"
  >
  </trigger>

  <trigger
   group="auction"
   enabled="y"
   match="Current bid on this item is * * (*)."
   send_to="12"
   sequence="550"
  >
  <send>
-- do something?
  </send>
  </trigger>

  <trigger
   group="auction"
   enabled="y"
   match="^There is no (auction|marketplace) item with that id\.$"
   regexp="y"
   send_to="12"
   script="bx_disable_triggers"
   sequence="540"
  >
  </trigger>

  <trigger
   group="auction"
   enabled="y"
   match="Auction, Inc. (TM) currently holds no inventory."
   send_to="12"
   script="bx_disable_triggers"
   sequence="530"
  >
  </trigger>

  <trigger
   group="auction"
   enabled="n"
   keep_evaluating="y"
   match="(^&amp;lt;)|^$"
   name="auc_blank"
   regexp="y"
   send_to="12"
   sequence="520"
  >
  <send>
if (tonumber(GetVariable("capture_start")) == 0) and (tonumber(GetVariable("start_auc_line")) == 0) then
  SetVariable("capture_start", 1)
  
  EnableTrigger("auc_line", true)
  EnableTrigger("auc_body", true)
  
  -- print("start capturing...")

elseif (tonumber(GetVariable("capture_start")) ~= 0) and (tonumber(GetVariable("start_auc_line")) ~= 0) then
  SetVariable("capture_start", 0)
  SetVariable("start_auc_line", 0)
  
  EnableTrigger("auc_line", false)
  EnableTrigger("auc_body", false)
  EnableTrigger("auc_blank", false)
  
  -- print("end capture!")
end
  </send>
  </trigger>

  <trigger
   group="auction"
   name="auc_line"
   enabled="n"
   keep_evaluating="y"
   match="^\+\-{65}\+$"
   regexp="y"
   send_to="12"
   script="save_info"
   sequence="510"
  >
  <send>
SetVariable("start_auc_line", 1)
  </send>
  </trigger>

  <trigger
   group="auction"
   name="auc_body"
   enabled="n"
   keep_evaluating="y"
   match="*"
   send_to="12"
   script="save_info"
   sequence="500"
  >
  </trigger>
</triggers>


<!--  Aliases  -->

<aliases>
  <alias
   match="bx *"
   enabled="y"
   group="auction"
   send_to="12"
   script="bx_ready_triggers"
   sequence="300"
  >
  <send>
Execute("bid %1")
  </send>
  </alias>

  <alias
   match="bxm *"
   enabled="y"
   group="auction"
   send_to="12"
   script="bx_ready_triggers"
   sequence="300"
  >
  <send>
Execute("lbid %1")
  </send>
  </alias>

  <alias
   match="bx"
   enabled="y"
   group="auction"
   send_to="12"
   sequence="200"
  >
  <send>
Execute(GetVariable("last_cmd"))
  </send>
  </alias>
</aliases>


<!--  Variables  -->

<variables>
  <variable name="start_auc_line">0</variable>
  <variable name="last_cmd"></variable>
  <variable name="capture_start">0</variable>
</variables>


<!--  Script  -->

<script>
<![CDATA[

local t_data = {}

function bx_ready_triggers()
  SetVariable("start_auc_line", 0)
  SetVariable("capture_start", 0)
  
  EnableTrigger("auc_blank", true)
end

function bx_disable_triggers()
   SetVariable("capture_start", 0)
   SetVariable("start_auc_line", 0)

   EnableTrigger("auc_line", false)
   EnableTrigger("auc_body", false)
   EnableTrigger("auc_blank", false)
end

function save_info(name, line, wildcards, styles)
  table.insert(t_data, styles)
end

function hlink_num(cmd, num, styles)
  for _, v in ipairs(styles) do
    local text_color = RGBColourToName(v.textcolour)
    local text_bgcolor = RGBColourToName(v.backcolour)

    if (string.match(v.text, num)) then
      local str = v.text
      local cmd_line = cmd .. num
      
      for i = 1, #str do
        if (str:sub(i, i) == " ") then
          ColourTell("", "", " ")
        else
          break
        end
      end

      Hyperlink(cmd_line, num, "click the link or type " .. cmd_line, text_color, text_bgcolor, 0)
      SetVariable("last_cmd", cmd_line)
    else
      ColourTell(text_color, text_bgcolor, v.text)
    end    
  end

  Note()
end

function hlink_bid(name, line, wildcards, styles)
  hlink_num("bx ", tonumber(wildcards.num), styles)
end

function hlink_lbid(name, line, wildcards, styles)
  hlink_num("bxm ", tonumber(wildcards.num), styles)
end

]]>
</script>
</muclient>
